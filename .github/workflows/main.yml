name: continuous-integration
on: [push, pull_request]

jobs:
  Linux:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        runner: [ubuntu-22.04, ubuntu-24.04-arm]
    permissions:
      checks: write
      pull-requests: write
    env:
      ALSOFT_CONF: love2d-${{ github.sha }}/testing/resources/alsoft.conf
      VK_LAYER_SETTINGS_PATH: love2d-${{ github.sha }}/testing/resources/vk_layer_settings.txt
      DISPLAY: :99
    steps:
      - name: Update APT
        run: sudo apt-get update

      - name: Install Dependencies
        run: |
          sudo apt-get install --assume-yes build-essential git make cmake autoconf automake \
            libtool pkg-config libasound2-dev libpulse-dev libaudio-dev \
            libjack-dev libx11-dev libxext-dev libxrandr-dev libxcursor-dev \
            libxfixes-dev libxi-dev libxinerama-dev libxxf86vm-dev libxss-dev \
            libgl1-mesa-dev libdbus-1-dev libudev-dev libgles2-mesa-dev \
            libegl1-mesa-dev libibus-1.0-dev fcitx-libs-dev libsamplerate0-dev \
            libsndio-dev libwayland-dev libxkbcommon-dev libdrm-dev libgbm-dev \
            libcurl4-openssl-dev libfuse2 wmctrl openbox mesa-vulkan-drivers \
            libpipewire-0.3-dev libwayland-dev libdecor-0-dev liburing-dev \
            libvulkan1

      - name: Install Vulkan SDK
        if: ${{ runner.arch == 'X64' }}
        run: |
          set -e
          wget -qO- https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo tee /etc/apt/trusted.gpg.d/lunarg.asc
          sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-1.3.283-jammy.list https://packages.lunarg.com/vulkan/1.3.283/lunarg-vulkan-1.3.283-jammy.list
          sudo apt-get update
          sudo apt-get install --assume-yes vulkan-sdk

      - name: Checkout love-appimage-source
        uses: actions/checkout@v4
        with:
          repository: love2d/love-appimage-source
          ref: main

      - name: Checkout LÃ–VE
        uses: actions/checkout@v4
        with:
          path: love2d-${{ github.sha }}

      - name: Clone robustmegasource (LuaJIT override)
        uses: actions/checkout@v4
        with:
          repository: misleadingname/robustmegasource
          ref: main
          path: robustmegasource

      - name: Replace LuaJIT with robustmegasource version
        run: |
          echo "Replacing LuaJIT with robustmegasource version..."
          rm -rf love2d-${{ github.sha }}/src/externals/LuaJIT*
          cp -r robustmegasource/libs/LuaJIT love2d-${{ github.sha }}/src/externals/LuaJIT

      - name: Get Dependencies for AppImage
        shell: python
        env:
          LOVE_BRANCH: ${{ github.sha }}
        run: |
          import os
          for i in range(250):
              if os.system(f"make getdeps LOVE_BRANCH={os.environ['LOVE_BRANCH']}") == 0:
                  raise SystemExit(0)
          raise Exception("make getdeps failed")

      - name: Build AppImage
        run: make LOVE_BRANCH=${{ github.sha }}

      - name: Print LuaJIT branch
        run: git -C love2d-${{ github.sha }}/src/externals/LuaJIT branch -v

  Windows:
    runs-on: windows-2025
    permissions:
      checks: write
      pull-requests: write
    env:
      ALSOFT_CONF: megasource/libs/love/testing/resources/alsoft.conf
      VK_ICD_FILENAMES: ${{ github.workspace }}\mesa\x64\lvp_icd.x86_64.json
      VULKAN_SDK: C:/VulkanSDK/1.3.231.1
    strategy:
      matrix:
        platform: [x64, ARM64]
    defaults:
      run:
        shell: cmd
    continue-on-error: ${{ matrix.platform == 'ARM64' }}
    steps:
      - name: Define Variables
        id: vars
        run: |
          rem JIT Modules
          if "${{ matrix.platform }}" == "x64" (
            (echo jitmodules=1)>> "%GITHUB_OUTPUT%"
          ) else (
            (echo jitmodules=0)>> "%GITHUB_OUTPUT%"
          )

          rem Architecture-Specific Switch
          goto ${{ matrix.platform }}
          exit /b 1

          :Win32
          (echo arch=x86)>> "%GITHUB_OUTPUT%"
          (echo angle=0)>> "%GITHUB_OUTPUT%"
          echo nofiles=warn>> "%GITHUB_OUTPUT%"
          exit /b 0

          :x64
          (echo arch=x64)>> "%GITHUB_OUTPUT%"
          (echo angle=0)>> "%GITHUB_OUTPUT%"
          echo nofiles=warn>> "%GITHUB_OUTPUT%"
          exit /b 0

          :ARM64
          (echo arch=arm64)>> "%GITHUB_OUTPUT%"
          (echo angle=1)>> "%GITHUB_OUTPUT%"
          echo nofiles=ignore>> "%GITHUB_OUTPUT%"
          echo moredef=-DLOVE_EXTRA_DLLS=%CD%\angle\libEGL.dll;%CD%\angle\libGLESv2.dll>> "%GITHUB_OUTPUT%"
          exit /b 0

      - name: Install NSIS
        run: winget install nsis --disable-interactivity --accept-source-agreements --accept-package-agreements
